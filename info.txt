Steps to create a Cucumber BDD framework

1. Create a new Maven project and add project dependencies
   -selenium, cucumber-java, cucumber-junit, cucumber-core, faker.
1a.Add the necessary framework components (.properties file, .gitignore, utility classes )
2. Create a package structure (pages,runners, stepDefinitions, utils)
3. Create resources folder under test and add a feature file (add Cucumber Java and Gherkin plugin to IntelliJ)
4. Create a cucumber feature file (feature file represents a user story, should be named after a feature, e.g. sign-in.feature)
5. Create a Runner class that connects the feature file steps to step definitions and add the necessary configuration
6. Generate step definition methods for unimplemented steps
7. Implement each step definition method's logic
8. To run a specific scenario/s, mark the scenario with a specific tag (@temp) and then run it through the Runner class by mentioning the tag in tags option


In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions glue option in Runner class
  - Cucumber scenario step is matched to step definition method using the text of the scenario step
    either with Cucumber Expressions or Regular Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class
  - Cucumber offers 3 types of Hooks: @BeforeAll, @AfterAll, @Before, @After, @BeforeStep, @AfterStep



How Cucumber Background is different from Hook?
1. Purpose: Hook is used for configuration logic whereas Background is used for test logic
2. Scope: Hook is applicable to all scenarios whereas Background is applicable only to scenarios within a single feature file



Reporting in Cucumber Framework
- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {"html:target/basic-report/report.html"}

How did you implement taking a screenshot on failure in Cucumber?
- In @After hook, we used Scenario class and checked if scenario is failed, and took a screenshot with Selenium and attached the scrrenshot file with Scenario class's attach method.
  e.g. public void tearDownScenario(Scenario scenario){
          if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), "image/png", "screenshot");
          }
    }


How do you run your scenarios through CMD in Cucumber framework?
- Using Maven Surefire plugin and mvn test command
    e.g.
    <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0</version>
                        <configuration>
                           <includes>
                               <include>CucumberRunner.java</include>
                           </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>





How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags="@positive"
mvn test -D cucumber.filter.tags="@positive and @smoke"
mvn test -D cucumber.filter.tags="@positive or @smoke"

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class's tags.


Lombok is used to reduce boilerplate code for classes, e.g., it can generate getters and setters for those objects automatically by using Lombok annotations.
The easiest way is to use the @Data annotation.
In our Framework we used Lombok annotation @Data for our Page classes to automatically generate getter methods to be accessible outside in our Test code.


Cucumber Data Table - a cucumber feature that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                                into the step definition method

             Example:           Given I am on homepage
                                When I pass this information
                                | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |

              The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
              Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
               Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long

           When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
           unmodifiable versions of these data structures.
           If you need to modify, you need to convert into a modifiable type.


DocString

If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """



What are some common Cucumber exceptions?

           UndefinedStepException -  when a scenario step does not have matching step definition method

           PendingException - default exception that added to each step definition snippet

           AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions

           DuplicateStepDefinitionException - happens when there are more than one step definitions with the exactly matching text

           CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                              type does not match the datatable


What is the difference between Cucumber Data Table and Scenario Outline's Examples table?

Data Table belongs to a single step of a scenario whereas Examples table belongs to the entire Scenario Outline.
We use Data Table when we want to pass table-style data (multiple sets of data) into a single step.
We use Examples table with Cucumber Scenario Outline when we want to run the same scenario multiple times with different input.



Cucumber comes with built-in Junit 4 by default and it does not have soft assertions.
Hence we can use AssertJ library to implement soft assertions:
           Ex:
                SoftAssertions softAssertions = new SoftAssertions();
                softAssertions.assertThat("actual").isEqualTo("expected");
                softAssertions.assertThat("actual2").isEqualTo("expected2");
                softAssertions.assertThat("actual3").isEqualTo("expected3");
                softAssertions.assertAll();
